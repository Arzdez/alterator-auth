#!/bin/sh

rdelim='[[:space:]]\+'
wdelim=' '

#pam configuration
pamldapfile="/etc/pam_ldap.conf"

#nss configuration
nssldapfile=
nssldapfile1="/etc/nss_ldap.conf"
nssldapfile2="/etc/nslcd.conf"
nsswitchfile="/etc/nsswitch.conf"

# openldap conf
ldap_conf="/etc/openldap/ldap.conf"

# krb conf
krb5_conf="/etc/krb5.conf"

# samba conf
smb_conf="/etc/samba/smb.conf"

#select between nss_ldap and nss-ldapd
[ -f "$nssldapfile1" ] && nssldapfile="$nssldapfile1"
[ -f "$nssldapfile2" ] && nssldapfile="$nssldapfile2"

. shell-config
. shell-ini-config
. shell-quote
. shell-error

#turn off auto expansion
set -f

# getting current auth
get_status()
{
    local status="$(/usr/sbin/control system-auth)"

    case "$status" in
        local) 
            echo "local"
        ;;
        ldap)
            echo -n "ldap " && pam_ldap_info
        ;;
        krb5*)
            echo -n "$status " && pam_ldap_info
        ;;
        winbind)
            echo -n "ad " && pam_ad_info
		;;
        *)
            echo "unknown status"
        ;;
    esac
}

list()
{
    # always local
    echo "local" 
   
    # checking pam_ldap and libnss_ldap libs
    [ -n "$(find /$(getconf SLIB)/security -maxdepth 1 -name 'pam_ldap.*')" ] &&
	[ -n "$(find /$(getconf SLIB) -maxdepth 1 -name 'libnss_ldap.so.*')" ] &&
    echo "ldap"
   
    # checking ldap and krb5 libs
    [ -n "$(find /$(getconf SLIB)/security -maxdepth 1 -name 'pam_ldap.*')" ] &&
	[ -n "$(find /$(getconf SLIB) -maxdepth 1 -name 'libnss_ldap.so.*')" ] &&
	[ -n "$(find /$(getconf SLIB) -maxdepth 1 -name 'libkrb5.so.*')" ] &&
	echo "krb5" 

    # checking winbind libs
    [ -n "$(find /$(getconf SLIB)/security -maxdepth 1 -name 'pam_winbind.*')" ] &&
	echo "ad"
}

pam_ldap_info()
{
    local uri basedn

    if [ -f "$pamldapfile" ];then
        uri="$(read_pam_ldap uri)"
        basedn="$(read_pam_ldap base)"
    else
        uri="$(read_nss_ldap uri)"
        basedn="$(read_nss_ldap base)"
    fi

    check_uri "$uri" && check_basedn "$basedn" && echo "$basedn $uri" 
}

pam_ad_info()
{
	local domain="$(ini_config_get "$smb_conf" "global" "realm")"
	local hostname="$(ini_config_get "$smb_conf" "global" "netbios name")"
	local workgroup="$(ini_config_get "$smb_conf" "global" "workgroup")"
    echo "$domain $hostname $workgroup"
}

check_uri()
{
    local uri="$1"

    [ -z "$uri" ] && message "$0 (check_uri) uri not set" && return 1

    [ -z "$(echo "$uri"| egrep "^ldap[s|i]?:\/\/[^\/]+/?$")" ] && message "$0 (check_uri) invalid uri format" && return 1

    :
}

check_basedn()
{
    local basedn="$1"

    [ -z "$basedn" ] && message "$0 (check_basedn) basedn not set" && return 1
    
    [ -z "$(echo "$basedn"| egrep "^dc=[^,]+(,dc=[^,]+)*$")" ] && message "$0 (check_basedn) invalid basedn format" && return 1

    :
}

read_pam_ldap()
{
    read_config "$pamldapfile" "$1"
}


read_nss_ldap()
{
    read_config "$nssldapfile" "$1"
}

read_config()
{
    shell_config_get "$1" "$2" "$rdelim"
}


write_profile()
{
    local scheme="$1"
	[ "$scheme" = "ad" ] && scheme="winbind"
    /usr/sbin/control system-auth "$scheme" &&
    case "$1" in
	local)
	    write_nsswitch "passwd" "files"
	    write_nsswitch "shadow" "tcb files"
	    write_nsswitch "group" "files"
	    ;;
	ldap|krb5*)
	    write_nsswitch "passwd" "files ldap"
	    write_nsswitch "shadow" "tcb files ldap"
	    write_nsswitch "group" "files ldap"
	    ;;
	ad)
	    write_nsswitch "passwd" "files winbind"
	    write_nsswitch "shadow" "tcb files winbind"
	    write_nsswitch "group" "files winbind"
	    ;;
    esac
}

write_nsswitch()
{
    write_config "$nsswitchfile" "$1:" "$2" 
}

write_2_ldap()
{
    write_pam_ldap "$1" "$2"
    write_nss_ldap "$1" "$2"
    write_ldap_conf "$1" "$2"
}

write_pam_ldap()
{
    [ -f "$pamldapfile" ] && write_config "$pamldapfile" "$1" "$2"
}

write_nss_ldap()
{
    write_config "$nssldapfile" "$1" "$2"
}

write_ldap_conf()
{
    # ugly, but effective
    sed -r -i -e "/^[^#]*$1.*$/Id" "$ldap_conf"
    echo "$1 $2" >> "$ldap_conf"
}

write_config()
{
    shell_config_set "$1" "$2" "$3" "$rdelim" "$wdelim"
}

dn_2_host()
{
    local dn="$1"

    echo "$dn"|sed -e 's/^dc=//i'|sed -e 's/,dc=/\./g'
}


remove_host_from_confs()
{
    del_from_conf_var "$pamldapfile" "host" && del_from_conf_var "$nssldapfile" "host"
}

del_from_conf_var()
{
    shell_config_del "$1" "$2" "$rdelim"
}

upper()
{
    echo -n "$1" | tr '[[:lower:]]' '[[:upper:]]'
}

write_ad_conf()
{
	local domain="$1"
	local hostname="$2"
	local workgroup="$3"

	# Prepare values for configuration
	[ -z "$hostname" ] && hostname="$(hostname -s)"
	[ -z "$workgroup" ] && workgroup="${domain/.*/}"

	# Convert to upper case
	domain="$(upper $domain)"
	hostname="$(upper $hostname)"
	workgroup="$(upper $workgroup)"

	# Prepare file for write parameters
	test -e "$smb_conf.orig" || cp "$smb_conf" "$smb_conf.orig"

	# Write main parameters
	ini-config "$smb_conf" global << AD_MAIN_PARAMS
	security = ads
	realm = $domain
	workgroup = $workgroup
	netbios name = $hostname
	encrypt passwords = true
	dns proxy = no
	socket options = TCP_NODELAY
	template shell = /bin/bash
	winbind use default domain = yes
	winbind refresh tickets = yes
AD_MAIN_PARAMS

	# Other parameters
	if [ -n '' ] ; then
	ini-config "$smb_conf" global << AD_ADDITIONAL_PARAMS
	idmap config * : range = "10000-20000"
	idmap config * : backend = tdb
	winbind enum users = yes
	winbind enum groups = yes
	domain master = no
	local master = no
	preferred master = no
	os level = 0
	domain logons = no
	load printers = no
	show add printer wizard = no
	printcap name = /dev/null
	disable spoolss = yes
AD_ADDITIONAL_PARAMS
	fi
}


#initial settings
init()
{
    # removing host parameter from pam_ldap_conf
    remove_host_from_confs
    if [ -f "$nssldapfile1" ]; then
        write_config "$nssldapfile1" bind_policy soft
        write_config "$nssldapfile1" bind_timelimit 30
    fi
}

# Enable service and (re)start it
enable_service() {
    service="$1"
    if [ -f "/etc/init.d/$service" ]; then
        chkconfig $service on &>/dev/null
        [ -n "$(service $service status| grep '^active\|running$')" ] && service $service stop &>/dev/null
        service $service start >/dev/null
    fi
}

# Disable service and stop it
disable_service() {
    service="$1"
    if [ -f "/etc/init.d/$service" ]; then
        chkconfig $service off &>/dev/null
        [ -n "$(service $service status| grep '^active\|running$')" ] && service $service stop &>/dev/null
    fi
}

# Join to Active Directory domin
join_ad_domain()
{
    local domain="$(upper $1)"
    local user="$2"
    local password="$3"

    [ -x /usr/bin/kinit ] || fatal "krb5-kinit is required for join to Active Directory domain"
    [ -x /usr/bin/net ] || fatal "samba-common is required for join to Active Directory domain"
    [ -e /etc/init.d/winbind ] || fatal "samba-winbind is required for join to Active Directory domain"

    # Prepare Kerberos environment
    local i="$shell_ini_config_prefix"
    export shell_ini_config_prefix=''
    ini_config_set "$krb5_conf" "libdefaults" "default_realm" "$(upper $1)"
    export shell_ini_config_prefix="$i"

    # Remove realms section
    sed -i '/^\[realms\]/,/^\[/{//!d};/^\[realms\]/d' "$krb5_conf"
    # Add realm
    cat >> "$krb5_conf" << EOF.
[realms]
$domain = {
kdc = $domain
}
EOF.

    # Get Kerberos ticket for administrator
    echo "$password" | kinit "$user@$domain" >/dev/null

    # Join to domain
    net ads join -U"$user%$password"

    # Destroy ticket
    kdestroy
}

# Disable service of old scheme
current="$(/usr/sbin/control system-auth)"
[ "$current" = "ldap" -o "$current" = "krb5" ] && disable_service nslcd
[ "$current" = "winbind" ] && disable_service winbind

action="$1" ; shift
[ $# -ge 1 ] && object="$1" && shift

case "$action" in
    status)
        get_status
    ;;
    list)
        list
    ;;
    write)
    case "$object" in
        local)
            write_profile "$object"
        ;;
        ldap|krb5*)
            if  check_basedn "$1" && check_uri "$2"  ;then
                init
                write_profile "$object"
                write_2_ldap base "$1"
                write_2_ldap uri "$2"
                # if nss-ldapd is used, restart daemon
				enable_service nslcd
            else
                exit 1
            fi
        ;;
        ad)
            if  test -n "$1" ;then
                init
                write_profile "$object"
                # Store configuration parameters: domain [hostname] [workgroup]
                write_ad_conf "$1" "$2" "$3"
                # Join computer to domain
                join_ad_domain "$1" "$4" "$5"
                # prepare winbind service
                enable_service winbind
            else
                exit 1
            fi
		;;
        *)
            fatal "unknown auth type $object"
        ;;
    esac
    ;;
    *)
        echo "$0 action [object]"
    ;;
esac

